{"version":3,"sources":["components/Chat.jsx"],"names":["Chat","socket","useRef","chatField","chatLog","appState","useContext","StateContext","appDispatch","DispatchContext","useImmer","fieldValue","chatMessages","state","setState","useEffect","isChatOpen","current","focus","type","io","on","message","draft","push","disconnect","scrollTop","scrollHeight","length","id","className","onClick","width","height","fill","ref","map","index","username","user","alt","src","avatar","to","onSubmit","e","preventDefault","emit","token","value","onChange","target","placeholder","autoComplete"],"mappings":"uMAiJeA,UAxIF,WACX,IAAMC,EAASC,iBAAO,MAChBC,EAAYD,iBAAO,MACnBE,EAAUF,iBAAO,MACjBG,EAAWC,qBAAWC,KACtBC,EAAcF,qBAAWG,KALd,EAMSC,YAAS,CACjCC,WAAY,GACZC,aAAc,KARC,mBAMVC,EANU,KAMHC,EANG,KA6DjB,OAlDAC,qBAAU,WACJV,EAASW,aACXb,EAAUc,QAAQC,QAClBV,EAAY,CAAEW,KAAM,4BAErB,CAACd,EAASW,aAEbD,qBAAU,WAOR,OANAd,EAAOgB,QAAUG,YAAG,+CACpBnB,EAAOgB,QAAQI,GAAG,kBAAkB,SAACC,GACnCR,GAAS,SAACS,GACRA,EAAMX,aAAaY,KAAKF,SAGrB,kBAAMrB,EAAOgB,QAAQQ,gBAC3B,IAEHV,qBAAU,WACRX,EAAQa,QAAQS,UAAYtB,EAAQa,QAAQU,aACxCd,EAAMD,aAAagB,SAAWvB,EAASW,YACzCR,EAAY,CAAEW,KAAM,+BAErB,CAACN,EAAMD,eA6BR,sBACEiB,GAAG,eACHC,UACE,4DACCzB,EAASW,WAAa,2BAA6B,IAJxD,UAOE,sBAAKc,UAAU,4BAAf,iBAEE,sBACEC,QAAS,kBAAMvB,EAAY,CAAEW,KAAM,eACnCW,UAAU,uBAFZ,SAIE,cAAC,IAAD,CAAYE,MAAO,GAAIC,OAAQ,GAAIC,KAAK,sBAG5C,qBAAKL,GAAG,OAAOC,UAAU,WAAWK,IAAK/B,EAAzC,SACGS,EAAMD,aAAawB,KAAI,SAACd,EAASe,GAChC,OAAIf,EAAQgB,WAAajC,EAASkC,KAAKD,SAEnC,sBAAiBR,UAAU,YAA3B,UACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,qBAAf,SAAqCR,EAAQA,YAE/C,qBACEkB,IAAI,SACJV,UAAU,0BACVW,IAAKnB,EAAQoB,WAPPL,GAcZ,sBAAiBP,UAAU,aAA3B,UACE,cAAC,IAAD,CAAMa,GAAE,mBAAcrB,EAAQgB,UAA9B,SACE,qBACEE,IAAI,SACJV,UAAU,cACVW,IAAKnB,EAAQoB,WAGjB,qBAAKZ,UAAU,eAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,cAAC,IAAD,CAAMa,GAAE,mBAAcrB,EAAQgB,UAA9B,SACE,mCAAShB,EAAQgB,SAAjB,UAEDhB,EAAQA,eAbLe,QAoBhB,sBACEO,SA3EN,SAAsBC,GACpBA,EAAEC,iBAEF7C,EAAOgB,QAAQ8B,KAAK,kBAAmB,CACrCzB,QAAST,EAAMF,WACfqC,MAAO3C,EAASkC,KAAKS,QAGvBlC,GAAS,SAACS,GAERA,EAAMX,aAAaY,KAAK,CACtBF,QAASC,EAAMZ,WACf2B,SAAUjC,EAASkC,KAAKD,SACxBI,OAAQrC,EAASkC,KAAKG,SAExBnB,EAAMZ,WAAa,OA6DjBkB,GAAG,WACHC,UAAU,uBAHZ,SAKE,uBACEmB,MAAOpC,EAAMF,WACbuC,SAxFR,SAA2BL,GACzB,IAAMI,EAAQJ,EAAEM,OAAOF,MACvBnC,GAAS,SAACS,GACRA,EAAMZ,WAAasC,MAsFfd,IAAKhC,EACLgB,KAAK,OACLW,UAAU,aACVD,GAAG,YACHuB,YAAY,uBACZC,aAAa","file":"static/js/5.a1c4f415.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useContext, useEffect, useRef } from \"react\";\nimport DispatchContext from \"../DispatchContext\";\nimport StateContext from \"../StateContext\";\nimport { useImmer } from \"use-immer\";\nimport io from \"socket.io-client\";\nimport { Link } from \"react-router-dom\";\nimport { CancelIcon } from \"./ui/AllSvg\";\n\nconst Chat = () => {\n  const socket = useRef(null);\n  const chatField = useRef(null);\n  const chatLog = useRef(null);\n  const appState = useContext(StateContext);\n  const appDispatch = useContext(DispatchContext);\n  const [state, setState] = useImmer({\n    fieldValue: \"\",\n    chatMessages: [],\n  });\n\n  useEffect(() => {\n    if (appState.isChatOpen) {\n      chatField.current.focus();\n      appDispatch({ type: \"clearUnreadChatCount\" });\n    }\n  }, [appState.isChatOpen]);\n\n  useEffect(() => {\n    socket.current = io(\"https://reactpracticebackend.herokuapp.com/\");\n    socket.current.on(\"chatFromServer\", (message) => {\n      setState((draft) => {\n        draft.chatMessages.push(message);\n      });\n    });\n    return () => socket.current.disconnect();\n  }, []);\n\n  useEffect(() => {\n    chatLog.current.scrollTop = chatLog.current.scrollHeight;\n    if (state.chatMessages.length && !appState.isChatOpen) {\n      appDispatch({ type: \"incrementUnreadChatCount\" });\n    }\n  }, [state.chatMessages]);\n\n  function handleFieldChange(e) {\n    const value = e.target.value;\n    setState((draft) => {\n      draft.fieldValue = value;\n    });\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Send message to chat server\n    socket.current.emit(\"chatFromBrowser\", {\n      message: state.fieldValue,\n      token: appState.user.token,\n    });\n\n    setState((draft) => {\n      // Add message to state collection of messages\n      draft.chatMessages.push({\n        message: draft.fieldValue,\n        username: appState.user.username,\n        avatar: appState.user.avatar,\n      });\n      draft.fieldValue = \"\";\n    });\n  }\n\n  return (\n    <div\n      id=\"chat-wrapper\"\n      className={\n        \"chat-wrapper shadow border-top border-left border-right \" +\n        (appState.isChatOpen ? \"chat-wrapper--is-visible\" : \"\")\n      }\n    >\n      <div className=\"chat-title-bar bg-primary\">\n        Chat\n        <span\n          onClick={() => appDispatch({ type: \"closeChat\" })}\n          className=\"chat-title-bar-close\"\n        >\n          <CancelIcon width={30} height={30} fill=\"currentColor\" />\n        </span>\n      </div>\n      <div id=\"chat\" className=\"chat-log\" ref={chatLog}>\n        {state.chatMessages.map((message, index) => {\n          if (message.username === appState.user.username) {\n            return (\n              <div key={index} className=\"chat-self\">\n                <div className=\"chat-message\">\n                  <div className=\"chat-message-inner\">{message.message}</div>\n                </div>\n                <img\n                  alt=\"avatar\"\n                  className=\"chat-avatar avatar-tiny\"\n                  src={message.avatar}\n                />\n              </div>\n            );\n          }\n\n          return (\n            <div key={index} className=\"chat-other\">\n              <Link to={`/profile/${message.username}`}>\n                <img\n                  alt=\"avatar\"\n                  className=\"avatar-tiny\"\n                  src={message.avatar}\n                />\n              </Link>\n              <div className=\"chat-message\">\n                <div className=\"chat-message-inner\">\n                  <Link to={`/profile/${message.username}`}>\n                    <strong>{message.username}: </strong>\n                  </Link>\n                  {message.message}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <form\n        onSubmit={handleSubmit}\n        id=\"chatForm\"\n        className=\"chat-form border-top\"\n      >\n        <input\n          value={state.fieldValue}\n          onChange={handleFieldChange}\n          ref={chatField}\n          type=\"text\"\n          className=\"chat-field\"\n          id=\"chatField\"\n          placeholder=\"Type a messageâ€¦\"\n          autoComplete=\"off\"\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"sourceRoot":""}